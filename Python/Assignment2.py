# -*- coding: utf-8 -*-
"""Leetcode1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MJ5ZWRjWXF1yT_UnZEK3Nn5_yOa9RZVf

1. Merge Strings Alternately
"""

class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        merged_string = ''
        i, j = 0, 0
        while i < len(word1) and j < len(word2):
            merged_string += word1[i] + word2[j]
            i += 1
            j += 1
        merged_string += word1[i:] + word2[j:]

        return merged_string

solution_instance = Solution()
result = solution_instance.mergeAlternately('abc', 'def')
print(result)

"""2. Find the Difference

"""

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        count = {}
        for char in s:
            if char in count:
                count[char] += 1
            else:
                count[char] = 1
        for char in t:
            if char in count:
                count[char] -= 1
            else:
                count[char] = -1
            if count[char] < 0:
                return char

solution = Solution()
result = solution.findTheDifference('abcd', 'abcde')
print(result)

"""3. Find the Index of the First Occurrence in a String"""

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle in haystack:
            return haystack.index(needle)
        else:
            return -1

solution = Solution()
result = solution.strStr('sadbutsad', 'sad')
print(result)

"""4. Valid Anagram"""

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)

solution = Solution()
result = solution.isAnagram('anagram', 'nagaram')
print(result)

"""5. Repeated Substring Pattern"""

class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        n = len(s)
        for length in range(1, n // 2 + 1):
            if n % length == 0:
                if s[:length] * (n // length) == s:
                    return True

        return False

solution = Solution()
result = solution.repeatedSubstringPattern('abab')
print(result)

"""6. Move Zeroes"""

class Solution:
    def moveZeroes(self, nums):
        non_zero_index = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[non_zero_index], nums[i] = nums[i], nums[non_zero_index]
                non_zero_index += 1

solution = Solution()
nums = [0, 1, 0, 3, 12]
solution.moveZeroes(nums)
print(nums)

"""7. Plus One"""

class Solution:
    def plusOne(self, digits):
        for i in range(len(digits)-1, -1, -1):
            if digits[i] < 9:
                digits[i] += 1
                return digits
            else:
                digits[i] = 0
        digits = [1] + digits
        return digits

solution = Solution()
digits = [1, 2, 3]
result = solution.plusOne(digits)
print(result)

"""8. Sign of the Product of an Array"""

class Solution:
    def arraySign(self, nums):
        product = 1
        for num in nums:
            product *= num
        if product > 0:
            return 1
        elif product < 0:
            return -1
        else:
            return 0

solution = Solution()
nums = [-1, 2, 3, -4]
result = solution.arraySign(nums)
print(result)

"""9. Can Make Arithmetic Progression from Sequence"""

class Solution:
    def canMakeArithmeticProgression(self, arr):
        arr.sort()
        common_diff = arr[1] - arr[0]
        for i in range(1, len(arr) - 1):
            if arr[i + 1] - arr[i] != common_diff:
                return False
        return True


solution = Solution()
arr = [3, 5, 1]
result = solution.canMakeArithmeticProgression(arr)
print(result)

"""10. Monotonic Array"""

class Solution:
    def isMonotonic(self, nums):
        increasing = decreasing = True
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                decreasing = False
            elif nums[i] < nums[i - 1]:
                increasing = False
        return increasing or decreasing

solution = Solution()
nums = [1, 2, 2, 3]
result = solution.isMonotonic(nums)
print(result)

"""11. Roman to Integer"""

class Solution:
    def romanToInt(self, s):
        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        result = 0
        for i in range(len(s)):
            if i < len(s) - 1 and roman_dict[s[i]] < roman_dict[s[i + 1]]:
                result -= roman_dict[s[i]]
            else:
                result += roman_dict[s[i]]

        return result

solution = Solution()
result = solution.romanToInt("III")
print(result)