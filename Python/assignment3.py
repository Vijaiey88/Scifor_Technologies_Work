# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vbqWfcSN_XI5bjsMrFf65NXV-eL5Hl7o

1. Length of Last Word
"""

class Solution:
  def lengthOfLastWord(self, s: str) -> int:
      s = s.split()
      return len(s[-1])
solution = Solution()
result = solution.lengthOfLastWord("   fly me   to   the moon  ")
print(result)

"""2. To Lower Case"""

class Solution:
  def toLowerCase(self, s: str) -> str:
    return s.lower()
solution = Solution()
result = solution.toLowerCase("Hello")
print(result)

"""3. Baseball Game"""

class Solution:
  def calPoints(self, operations: List[str]) -> int:
    l = []
    for i in operations:
      if i.isdigit() or (i[0] == '-' and i[1:].isdigit()):
        l.append(int(i))
      if i=='C':
        l.pop()
      if i=='D':
        l.append(l[-1]*2)
      if i=='+':
        l.append(l[-1]+l[-2])
    return sum(l)

solution = Solution()
result = solution.calPoints(["5","2","C","D","+"])
print(result)

"""4. Robot Return to Origin"""

class Solution:
  def judgeCircle(self, moves: str) -> bool:
    count = {'U':0, 'D':0, 'L':0, 'R':0}
    for i in moves:
      if i in count:
        count[i] += 1
      else:
        count[i] = 1
    if count['U']-count['D']==0 and count['L']-count['R']==0:
      return True
    else:
      return False

solution = Solution()
result = solution.judgeCircle("DU")
print(result)

"""5. Find Winner on a Tic Tac Toe Game"""

class Solution:
  def tictactoe(self, moves: List[List[int]]) -> str:
    scores = [0]*8
    for i, (row, col) in enumerate(moves):
        if i%2 == 0:
            x = 1
        else:
            x = -1
        scores[row] += x
        scores[col+3] += x
        if row == col:
            scores[6] += x
        if 2-row == col:
            scores[7] += x
    for score in scores:
        if score == 3:
            return "A"
        if score == -3:
            return "B"
    if len(moves) == 9:
        return 'Draw'
    else:
        return "Pending"

solution = Solution()
result = solution.tictactoe([[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]])
print(result)

"""6. Robot Bounded In Circle"""

class Solution:
  def isRobotBounded(self, instructions: str) -> bool:
    direction = (0,1)
    start = [0,0]
    for x in instructions:
        if x == 'G':
            start[0] += direction[0]
            start[1] += direction[1]
        elif x == 'L':
            direction = (-direction[1], direction[0])
        elif x == 'R':
            direction = (direction[1], -direction[0])

    return start == [0,0] or direction != (0,1)

solution = Solution()
result = solution.isRobotBounded('GG')
print(result)

"""7. Richest Customer Wealth"""

class Solution:
  def maximumWealth(self, accounts: List[List[int]]) -> int:
    l = []
    for i in range(len(accounts)):
      l.append(sum(accounts[i]))
    return max(l)

solution = Solution()
result = solution.maximumWealth([[1,2,3],[3,2,1]])
print(result)

"""8. Matrix Diagonal Sum"""

class Solution:
  def diagonalSum(self, mat: List[List[int]]) -> int:
    total = 0
    left = 0
    right = len(mat) - 1
    for row in mat:
        if left == right:
            total += row[left]
        else:
            total += row[left] + row[right]
        left += 1
        right -= 1
    return total

solution = Solution()
result = solution.diagonalSum([[1,2,3],[4,5,6],[7,8,9]])
print(result)

"""9. Spiral Matrix

"""

class Solution:
  def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
    m = len(matrix)
    n = len(matrix[0])
    order = []
    i, j = 0, 0
    x, y = 0, +1
    t, r, b, l = 0, n-1, m-1, 0
    for _ in range(m*n):
      order.append(matrix[i][j])
      if y > 0 and j == r:
          x, y = +1, 0
          t += 1
      elif x > 0 and i == b:
          x, y = 0, -1
          r -= 1
      elif y < 0 and j == l:
          x, y = -1, 0
          b -= 1
      elif x < 0 and i == t:
          x, y = 0, +1
          l += 1

      i += x
      j += y
    return order

solution = Solution()
result = solution.spiralOrder([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
print(result)

"""10. Set Matrix Zeroes

"""

class Solution:
  def setZeroes(self, matrix: List[List[int]]) -> None:
    x=len(matrix)
    y=len(matrix[0])
    d=[0]*y
    l=[]
    s=[]
    for i in range(0,x):
        for j in range(0,y):
            if matrix[i][j]==0:
                l+=[i]
                s+=[j]
    for i in l:
        matrix[i]=d
    for i in matrix:
        for j in s:
            i[j]=0
    return matrix

solution = Solution()
result = solution.setZeroes([[1,1,1],[1,0,1],[1,1,1]])
print(result)

"""11. Count Odd Numbers in an Interval Range"""

import math
class Solution(object):
  def countOdds(self, low, high):
      if low%2==0 or high%2==0:
          return math.ceil((high-low)/2)
      else:
          return (high-low)//2+1

solution = Solution()
result = solution.countOdds(21,22)
print(result)

"""12. Average Salary Excluding the Minimum and Maximum"""

class Solution:
  def average(self, salary: List[int]) -> float:
    average_salary = (sum(salary)-min(salary)-max(salary))/(len(salary)-2)
    return average_salary

solution = Solution()
salary = [1000,2000,3000]
result = solution.average(salary)
print(result)

"""13. Lemonade Change"""

class Solution:
  def lemonadeChange(self, bills: List[int]) -> bool:
      change = {5: 0, 10: 0, 20:0}
      for i in bills:
        change[i] += 1
        if i == 10:
            if change[5] >= 1:
                change[5] -= 1
            else:
                return False
        elif i == 20:
            if change[10] >= 1 and change[5] >= 1:
                change[10] -= 1
                change[5] -= 1
            elif change[5] >= 3:
                change[5] -= 3
            else:
                return False
      return True

solution = Solution()
result = solution.lemonadeChange([5, 5, 5, 10, 20])
print(result)

"""14. Largest Perimeter Triangle"""

class Solution:
  def largestPerimeter(self, nums: List[int]) -> int:
    nums.sort()
    for i in range(len(nums)-1, 1, -1):
        if nums[i] < nums[i-1] + nums[i-2]:
            return nums[i] + nums[i-1] + nums[i-2]
    return 0

solution = Solution()
result = solution.largestPerimeter([1,2,1,10])
print(result)

"""15. Check If It Is a Straight Line"""

class Solution:
  def checkStraightLine(self, coordinates: List[List[int]]) -> bool:
    x = coordinates[1][0] - coordinates[0][0]
    y = coordinates[1][1] - coordinates[0][1]
    old_slope = x*coordinates[0][1] - y*coordinates[0][0]
    for i in range(len(coordinates)):
        x_1 = coordinates[i][0]
        y_1 = coordinates[i][1]
        new_slope = x*y_1 - y*x_1
        if old_slope != new_slope :
            return False
    else:
        return True

solution = Solution()
result = solution.checkStraightLine([[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]])
print(result)

"""16. Add Binary"""

class Solution:
  def addBinary(self, a: str, b: str) -> str:
    binary_addition = bin(int(a,2)+int(b,2))
    return binary_addition[2:]

solution = Solution()
result = solution.addBinary('11','1')
print(result)

"""17. Multiply Strings"""

class Solution:
  def multiply(self, num1: str, num2: str) -> str:
      product = int(num1)*int(num2)
      return str(product)

solution = Solution()
result = solution.multiply('123','456')
print(result)

"""18. Pow(x, n)"""

class Solution:
  def myPow(self, x: float, n: int) -> float:
    return x**n

solution = Solution()
result = solution.myPow(2.00000,-2)
print(result)